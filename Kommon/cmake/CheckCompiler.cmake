# Compiler version check and C++11 support

if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    set(COMPILER_IS_GNU 1)
    set(COMPILER_ID "GNU")
    if(NOT CMAKE_CXX_COMPILER_VERSION)
        exec_program(${CMAKE_C_COMPILER} ARGS "-dumpversion" OUTPUT_VARIABLE CMAKE_CXX_COMPILER_VERSION)
    endif()
    set(COMPILER_VERSION ${CMAKE_CXX_COMPILER_VERSION})
    
elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    if(CMAKE_SYSTEM_NAME MATCHES "Darwin")
        set(COMPILER_IS_XCODE 1)
        set(COMPILER_ID "Xcode")
        if(NOT CMAKE_CXX_COMPILER_VERSION)
            exec_program(${CMAKE_C_COMPILER} ARGS "-v" OUTPUT_VARIABLE _xcode_version_info)
            string(REGEX REPLACE "^.*\\ ([0-9]+\\.[0-9]+).*$" "\\1" CMAKE_CXX_COMPILER_VERSION "${_xcode_version_info}")
        endif()
    else()
        set(COMPILER_IS_CLANG 1)
        set(COMPILER_ID "Clang")
        if(NOT CMAKE_CXX_COMPILER_VERSION)
            exec_program(${CMAKE_C_COMPILER} ARGS "-v" OUTPUT_VARIABLE _clang_version_info)
            string(REGEX REPLACE "^.*\\ ([0-9]+\\.[0-9]+).*$" "\\1" CMAKE_CXX_COMPILER_VERSION "${_clang_version_info}")
        endif()
    endif()
    set(COMPILER_VERSION ${CMAKE_CXX_COMPILER_VERSION})
    
else()
    message(FATAL_ERROR "Unknown or unsupported compiler: ${CMAKE_CXX_COMPILER_ID}")
endif()

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)

macro(kasper_require_clang_version VERSION)
    if(COMPILER_IS_CLANG)
        if(COMPILER_VERSION VERSION_LESS ${VERSION})
            message(FATAL_ERROR "Clang version >= ${VERSION} is required.")
        endif()
    endif()
endmacro()

macro(kasper_require_xcode_version VERSION)
    if(COMPILER_IS_XCODE)
        if(COMPILER_VERSION VERSION_LESS ${VERSION})
            message(FATAL_ERROR "Xcode Clang version >= ${VERSION} is required.")
        endif()
    endif()
endmacro()

macro(kasper_require_gcc_version VERSION)
    if(COMPILER_IS_GNU)
        if(COMPILER_VERSION VERSION_LESS ${VERSION})
            message(FATAL_ERROR "GCC version >= ${VERSION} is required.")
        endif()
    endif()
endmacro()

macro(kasper_require_cpp11)
    if (COMPILER_IS_GNU AND NOT COMPILER_VERSION VERSION_LESS "6.0.0")
        # do nothing, g++ 6.x has c++14 support activated by default#
    else()
        if(COMPILER_SUPPORTS_CXX11)
            set( CXX11_FLAG "-std=c++11" )
        elseif(COMPILER_SUPPORTS_CXX0X)
            set( CXX11_FLAG "-std=c++0x" )
        else()
            message(FATAL_ERROR "Compiler ${CMAKE_CXX_COMPILER} has no C++11 support.")
        endif()
        if (NOT "${CMAKE_CXX_FLAGS}" MATCHES "\\-std\\=c\\+\\+")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXX11_FLAG}" )
        endif()
        SET_PROPERTY(GLOBAL PROPERTY CXX11_FLAG ${CXX11_FLAG})
    endif()
endmacro()